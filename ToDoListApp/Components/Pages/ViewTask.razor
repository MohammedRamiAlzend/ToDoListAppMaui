@page "/ViewTask"

@inject ITaskAppService _its

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (TaskApps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Due Date</th>
                <th>Priority</th>
                <th>Status</th>
                <th>Created at</th>
                <th>Updated At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in TaskApps)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.DueDate</td>
                    <td>@task.Priority</td>
                    <td>@task.Status</td>
                    <td>@task.CreatedAt</td>
                    <td>@task.UpdatedAt</td>
                </tr>
            }
        </tbody>
    </table>
    <input type="number" @bind-value="taskId" />
    <button @onclick="@GetTaskById"> Get Task</button>
    @if (taskApp != null)
    {
        <p>@taskApp.Title</p>
    }
    else
    {
        <p>nothing to show</p>
    }
}
@code {
    private List<TaskApp> TaskApps;

    public int taskId { get; set; }
    public TaskApp taskApp { get; set; }
    protected override async Task OnInitializedAsync()
    {
        TaskApps = await _its.GetAllTasks();
    }
    public async void GetTaskById()
    {
        var requesst = await _its.GetTaskByIdAsync(taskId);
        taskApp = requesst;
    }

}
