@page "/ViewTask"
@using ToDoListApp.Models
@using ToDoListApp.Services
@inject ITaskAppService _its
<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (TaskApps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @* <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
 *@
    @* ------------------------------------------ *@
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Due Date</th>
                <th>Priority</th>
                <th>Status</th>
                <th>Created at</th>
                <th>Updated At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in TaskApps)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.DueDate</td>
                    <td>@task.Priority</td>
                    <td>@task.Status</td>
                    <td>@task.CreatedAt</td>
                    <td>@task.UpdatedAt</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private List<TaskApp> TaskApps;

    protected override async Task OnInitializedAsync()
    {
        TaskApps = await _its.GetAllTasks();

        // // Simulate asynchronous loading to demonstrate a loading indicator
        // await Task.Delay(500);

        // var startDate = DateOnly.FromDateTime(DateTime.Now);
        // var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        // {
        //     Date = startDate.AddDays(index),
        //     TemperatureC = Random.Shared.Next(-20, 55),
        //     Summary = summaries[Random.Shared.Next(summaries.Length)]
        // }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
